AWSTemplateFormatVersion: '2010-09-09'
Description: 'Big Data Analytics Infrastructure - EC2, S3, RDS, and EMR'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  DBUsername:
    Description: Username for the RDS database
    Type: String
    Default: admin
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  
  DBPassword:
    Description: Password for the RDS database
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters.

Resources:
  # VPC and Network Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: BigDataAnalyticsVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: BigDataAnalyticsIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable PostgreSQL access from EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # S3 Buckets
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-raw-data'
      VersioningConfiguration:
        Status: Enabled

  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-processed-data'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ProcessedDataLifecycle
            Status: Enabled
            Prefix: processed/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365
          - Id: LogsLifecycle
            Status: Enabled
            Prefix: logs/
            ExpirationInDays: 90

  EMRLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-emr-logs'

  # RDS Database
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-db'
      DBName: projectdb
      Engine: postgres
      EngineVersion: 13.4
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      BackupRetentionPeriod: 7
      DeletionProtection: false

  # EC2 Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (update with the latest AMI ID)
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebApp'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y python3 python3-pip git
          amazon-linux-extras install -y postgresql12
          
          # Install AWS CLI
          pip3 install awscli
          
          # Clone repository
          git clone https://github.com/your-username/big-data-analytics.git /home/ec2-user/big-data-analytics
          chown -R ec2-user:ec2-user /home/ec2-user/big-data-analytics
          
          # Install dependencies
          cd /home/ec2-user/big-data-analytics
          pip3 install -r requirements.txt
          
          # Configure environment variables
          cat > /home/ec2-user/big-data-analytics/.env << EOL
          S3_RAW_BUCKET=${RawDataBucket}
          S3_PROCESSED_BUCKET=${ProcessedDataBucket}
          RDS_HOST=${RDSInstance.Endpoint.Address}
          RDS_PORT=${RDSInstance.Endpoint.Port}
          RDS_DATABASE=projectdb
          RDS_USERNAME=${DBUsername}
          RDS_PASSWORD=${DBPassword}
          FLASK_APP=src.web.app
          FLASK_ENV=production
          EOL
          
          # Setup web application to start on boot
          cat > /etc/systemd/system/bigdata-webapp.service << EOL
          [Unit]
          Description=Big Data Analytics Web Application
          After=network.target
          
          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/big-data-analytics
          ExecStart=/usr/bin/python3 -m src.web.run
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          systemctl enable bigdata-webapp.service
          systemctl start bigdata-webapp.service
          
          # Install and configure Nginx
          amazon-linux-extras install -y nginx1
          
          cat > /etc/nginx/conf.d/bigdata.conf << EOL
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
              }
          }
          EOL
          
          systemctl enable nginx
          systemctl start nginx

  # IAM Roles
  EMRServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

  EMRJobFlowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role

  EMRInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EMRJobFlowRole

  # EMR Cluster
  EMRCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: !Sub '${AWS::StackName}-EMR'
      ReleaseLabel: emr-6.10.0
      Applications:
        - Name: Hadoop
        - Name: Spark
        - Name: Hive
      Instances:
        MasterInstanceType: m5.xlarge
        SlaveInstanceType: m5.xlarge
        InstanceCount: 3
        TerminationProtected: false
        Ec2KeyName: !Ref KeyName
        Ec2SubnetId: !Ref PublicSubnet1
      VisibleToAllUsers: true
      JobFlowRole: !Ref EMRInstanceProfile
      ServiceRole: !Ref EMRServiceRole
      LogUri: !Sub 's3://${EMRLogsBucket}/'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EMR'

Outputs:
  WebsiteURL:
    Description: URL for the web application
    Value: !Sub 'http://${WebServerInstance.PublicDnsName}'
  
  RDSEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
  
  RawDataBucketName:
    Description: S3 Bucket for Raw Data
    Value: !Ref RawDataBucket
  
  ProcessedDataBucketName:
    Description: S3 Bucket for Processed Data
    Value: !Ref ProcessedDataBucket
  
  EMRClusterId:
    Description: EMR Cluster ID
    Value: !Ref EMRCluster 